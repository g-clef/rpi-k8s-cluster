---
# roles/nfs_roots/tasks/build_per_node.yml
# Uses vars from main: base_root_dir, upper_root_dir, work_root_dir, work_dir, tftp_root, per_node_root_base

# 1) Identity pieces first (don't reference these in the same set_fact)
- name: Compute node identity
  ansible.builtin.set_fact:
    node_name: "{{ hostvars[node].hostname }}"
    node_mac_id: "{{ hostvars[node].mac | lower | replace(':','-') }}"

# 2) Now compute paths that can safely use the above
- name: Compute node paths
  ansible.builtin.set_fact:
    node_root: "{{ per_node_root_base }}/{{ node_name }}"
    node_tftp: "{{ tftp_root }}/{{ node_mac_id }}"
    node_upper: "{{ upper_root_dir }}/{{ node_name }}"
    node_work:  "{{ work_root_dir  }}/{{ node_name }}"

- name: Prepare directories (mountpoint and per-node upper/work, TFTP)
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ node_root }}"
    - "{{ node_upper }}"
    - "{{ node_work }}"
    - "{{ node_tftp }}"
  become: true

# Ensure overlayfs module exists/enabled
- name: Load overlayfs kernel module (no-fail if already loaded)
  ansible.builtin.command: modprobe overlay
  changed_when: false
  failed_when: false
  become: true

- name: Persist overlay module at boot
  ansible.builtin.copy:
    dest: /etc/modules-load.d/overlay.conf
    content: "overlay\n"
    mode: "0644"
  become: true

# Persist and mount overlay
- name: Ensure overlay mount present in fstab
  ansible.posix.mount:
    path: "{{ node_root }}"
    src: "overlay"
    fstype: overlay
    opts: "lowerdir={{ base_root_dir }},upperdir={{ node_upper }},workdir={{ node_work }}"
    state: present
  become: true

- name: Mount overlay (lower=base, upper/work per-node)
  ansible.posix.mount:
    path: "{{ node_root }}"
    src: "overlay"
    fstype: overlay
    opts: "lowerdir={{ base_root_dir }},upperdir={{ node_upper }},workdir={{ node_work }}"
    state: mounted
  become: true

# --- Per-node customizations (written into overlay upper) ---

- name: Set hostname
  ansible.builtin.copy:
    dest: "{{ node_root }}/etc/hostname"
    content: "{{ node_name }}\n"
    mode: "0644"
  become: true

- name: Update /etc/hosts
  ansible.builtin.lineinfile:
    path: "{{ node_root }}/etc/hosts"
    regexp: '^127\.0\.1\.1\s+'
    line: "127.0.1.1\t{{ node_name }}"
    create: true
  become: true

- name: Add tmpfs entries to /etc/fstab
  ansible.builtin.blockinfile:
    path: "{{ node_root }}/etc/fstab"
    block: |
      tmpfs /var/log tmpfs defaults,noatime,nosuid,size={{ tmpfs_var_log_size }} 0 0
      tmpfs /tmp     tmpfs defaults,noatime,nosuid,size={{ tmpfs_tmp_size }}     0 0
  become: true

# --- TFTP boot files: shared + per-node cmdline.txt ---

- name: Determine boot source directory
  ansible.builtin.set_fact:
    boot_src_dir: "{{ firmware_boot_dir | default(work_dir ~ '/firmware-master/boot') }}"

- name: Ensure boot source directory exists
  ansible.builtin.stat:
    path: "{{ boot_src_dir }}"
  register: boot_src_stat

- name: Fail if boot source dir is missing
  ansible.builtin.fail:
    msg: "Boot files not found at {{ boot_src_dir }}. Ensure the firmware download/unpack step ran earlier."
  when: not boot_src_stat.stat.exists

- name: Populate node TFTP dir (hard-link clone of boot files)
  ansible.builtin.command: >
    rsync -a --delete
    --link-dest="{{ boot_src_dir }}/"
    --out-format='<<CHANGED>>%i %n%L'
    "{{ boot_src_dir }}/"
    "{{ node_tftp }}/"
  register: rsync_boot
  changed_when: "'<<CHANGED>>' in rsync_boot.stdout"
  become: true

- name: Write per-node cmdline.txt (NFS root)
  ansible.builtin.template:
    src: cmdline.txt.j2
    dest: "{{ node_tftp }}/cmdline.txt"
    mode: "0644"
  vars:
    node_hostname: "{{ node_name }}"
  become: true
