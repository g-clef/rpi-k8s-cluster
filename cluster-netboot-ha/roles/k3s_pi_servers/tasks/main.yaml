---
- name: Install k3s-server unit for pi01 (cluster-init)
  copy:
    dest: "{{ per_node_root_base }}/pi01/etc/systemd/system/k3s-server.service"
    content: "{{ lookup('template','k3s-server.service.first.j2') }}"

- name: Install k3s-server unit for joining servers
  copy:
    dest: "{{ per_node_root_base }}/{{ hostvars[item].hostname }}/etc/systemd/system/k3s-server.service"
    content: "{{ lookup('template','k3s-server.service.join.j2') }}"
  loop: "{{ groups['pi_servers'] | difference(['pi01']) }}"
  loop_control: { label: "{{ hostvars[item].hostname }}" }

# Ensure wants dir exists
- name: Ensure server wants dir exists
  ansible.builtin.file:
    path: "{{ per_node_root_base }}/{{ hostvars[item].hostname }}/etc/systemd/system/multi-user.target.wants"
    state: directory
    mode: "0755"
  loop: "{{ groups['pi_servers'] | default([]) }}"
  loop_control:
    label: "{{ hostvars[item].hostname }}"
  become: true

# Create symlink to k3s.service (relative within the node root)
- name: Enable k3s server unit (create wants symlink)
  ansible.builtin.file:
    state: link
    path: "{{ per_node_root_base }}/{{ hostvars[item].hostname }}/etc/systemd/system/multi-user.target.wants/k3s.service"
    src: "../k3s.service"
    force: true
  loop: "{{ groups['pi_servers'] | default([]) }}"
  loop_control:
    label: "{{ hostvars[item].hostname }}"
  become: true


- name: Drop firstboot ops unit on pi01 (labels + Argo CD)
  copy:
    dest: "{{ per_node_root_base }}/pi01/etc/systemd/system/firstboot-ops.service"
    content: "{{ lookup('template','firstboot-ops.service.j2') }}"

- name: Enable firstboot ops on pi01
  file:
    state: link
    src: /etc/systemd/system/firstboot-ops.service
    dest: "{{ per_node_root_base }}/pi01/etc/systemd/system/multi-user.target.wants/firstboot-ops.service"
