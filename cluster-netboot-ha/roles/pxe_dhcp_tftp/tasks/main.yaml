- name: Ensure rsync is installed
  ansible.builtin.package:
    name: rsync
    state: present
  become: true

- name: Ensure TFTP root exists
  ansible.builtin.file:
    path: /srv/tftp
    state: directory
    mode: "0755"
  become: true

# Ensure work dir exists (if you don't already elsewhere)
- name: Ensure build/work dir exists
  ansible.builtin.file:
    path: "{{ work_dir }}"
    state: directory
    mode: "0755"
  become: true

# Get Raspberry Pi firmware (ZIP of the repo HEAD by default; override rpi_firmware_url if you like)
- name: Download Raspberry Pi firmware (patient + retries)
  ansible.builtin.get_url:
    url: "{{ rpi_firmware_url | default('https://github.com/raspberrypi/firmware/archive/refs/heads/master.zip') }}"
    dest: "{{ work_dir }}/rpi-fw.zip"
    mode: "0644"
    force: false
    timeout: 1800
    tmp_dest: "{{ work_dir }}"
  register: fw_dl
  retries: 5
  delay: 10
  until: fw_dl is succeeded

- name: Unpack firmware
  ansible.builtin.unarchive:
    src: "{{ work_dir }}/rpi-fw.zip"
    dest: "{{ work_dir }}"
    remote_src: true
  become: true

# Find the directory that actually contains the boot files (start*.elf / fixup*.dat)
- name: Locate boot files directory
  ansible.builtin.find:
    paths: "{{ work_dir }}"
    patterns: "start*.elf"
    recurse: true
  register: fw_elfs

- name: Derive firmware boot dir
  ansible.builtin.set_fact:
    firmware_boot_dir: "{{ (fw_elfs.files | first).path | dirname }}"
  when: fw_elfs.files | length > 0

- name: Fail if boot files not found
  ansible.builtin.fail:
    msg: >-
      Could not locate Raspberry Pi boot files under {{ work_dir }}.
      Expected to find start*.elf / fixup*.dat after unpacking firmware.
  when: fw_elfs.files | length == 0


- name: Sync /boot files to TFTP root (local on nas-vm, via sudo)
  ansible.builtin.command: >
    rsync -a --delete
    --out-format='<<CHANGED>>%i %n%L'
    "{{ firmware_boot_dir }}/"
    "{{ tftp_root }}/"
  register: rsync_result
  changed_when: "'<<CHANGED>>' in rsync_result.stdout"
  become: true

- name: Install dnsmasq
  ansible.builtin.package:
    name: dnsmasq
    state: present
  become: true

- name: Stop dnsmasq if running
  ansible.builtin.systemd:
    name: dnsmasq
    state: stopped
  become: true
  ignore_errors: true

- name: Check if systemd-resolved is running
  ansible.builtin.systemd:
    name: systemd-resolved
  register: resolved_status
  become: true
  ignore_errors: true

- name: Disable systemd-resolved DNS stub listener
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: '^#?DNSStubListener='
    line: 'DNSStubListener=no'
    backup: true
  become: true
  when: resolved_status.status.ActiveState is defined
  notify: restart systemd-resolved

- name: Remove /etc/resolv.conf symlink if it exists
  ansible.builtin.file:
    path: /etc/resolv.conf
    state: absent
  become: true
  when: resolved_status.status.ActiveState is defined

- name: Create new /etc/resolv.conf
  ansible.builtin.copy:
    content: |
      nameserver {{ router_ip }}
      nameserver 8.8.8.8
    dest: /etc/resolv.conf
    backup: true
  become: true
  when: resolved_status.status.ActiveState is defined

- name: Flush handlers to restart systemd-resolved
  meta: flush_handlers

- name: Create dnsmasq configuration
  ansible.builtin.template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    backup: true
  become: true
  notify: restart dnsmasq

- name: Start and enable dnsmasq
  ansible.builtin.systemd:
    name: dnsmasq
    state: started
    enabled: true
    daemon_reload: true
  become: true

# Install and configure dnsmasq
- name: Install dnsmasq
  ansible.builtin.package:
    name: dnsmasq
    state: present
  become: true

- name: Stop and disable systemd-resolved (conflicts with dnsmasq)
  ansible.builtin.systemd:
    name: systemd-resolved
    state: stopped
    enabled: false
  become: true
  ignore_errors: true

- name: Backup original dnsmasq.conf
  ansible.builtin.copy:
    src: /etc/dnsmasq.conf
    dest: /etc/dnsmasq.conf.backup
    remote_src: true
    backup: true
  become: true
  ignore_errors: true

- name: Configure dnsmasq
  ansible.builtin.template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    backup: true
  become: true
  notify: restart dnsmasq

- name: Create dnsmasq log directory
  ansible.builtin.file:
    path: /var/log/dnsmasq
    state: directory
    mode: '0755'
  become: true

- name: Enable and start dnsmasq service
  ansible.builtin.systemd:
    name: dnsmasq
    enabled: true
    state: started
    daemon_reload: true
  become: true

- name: Check dnsmasq service status
  ansible.builtin.systemd:
    name: dnsmasq
  register: dnsmasq_status
  become: true

- name: Display dnsmasq status
  ansible.builtin.debug:
    msg: "dnsmasq service is {{ dnsmasq_status.status.ActiveState }}"

