- name: Ensure rsync is installed
  ansible.builtin.package:
    name: rsync
    state: present
  become: true

- name: Ensure TFTP root exists
  ansible.builtin.file:
    path: /srv/tftp
    state: directory
    mode: "0755"
  become: true

# Ensure work dir exists (if you don't already elsewhere)
- name: Ensure build/work dir exists
  ansible.builtin.file:
    path: "{{ work_dir }}"
    state: directory
    mode: "0755"
  become: true

# Get Raspberry Pi firmware (ZIP of the repo HEAD by default; override rpi_firmware_url if you like)
- name: Download Raspberry Pi firmware (patient + retries)
  ansible.builtin.get_url:
    url: "{{ rpi_firmware_url | default('https://github.com/raspberrypi/firmware/archive/refs/heads/master.zip') }}"
    dest: "{{ work_dir }}/rpi-fw.zip"
    mode: "0644"
    force: false
    timeout: 1800
    tmp_dest: "{{ work_dir }}"
  register: fw_dl
  retries: 5
  delay: 10
  until: fw_dl is succeeded

- name: Unpack firmware
  ansible.builtin.unarchive:
    src: "{{ work_dir }}/rpi-fw.zip"
    dest: "{{ work_dir }}"
    remote_src: true
  become: true

# Find the directory that actually contains the boot files (start*.elf / fixup*.dat)
- name: Locate boot files directory
  ansible.builtin.find:
    paths: "{{ work_dir }}"
    patterns: "start*.elf"
    recurse: true
  register: fw_elfs

- name: Derive firmware boot dir
  ansible.builtin.set_fact:
    firmware_boot_dir: "{{ (fw_elfs.files | first).path | dirname }}"
  when: fw_elfs.files | length > 0

- name: Fail if boot files not found
  ansible.builtin.fail:
    msg: >-
      Could not locate Raspberry Pi boot files under {{ work_dir }}.
      Expected to find start*.elf / fixup*.dat after unpacking firmware.
  when: fw_elfs.files | length == 0


- name: Sync /boot files to TFTP root (local on nas-vm, via sudo)
  ansible.builtin.command: >
    rsync -a --delete
    --out-format='<<CHANGED>>%i %n%L'
    "{{ firmware_boot_dir }}/"
    "{{ tftp_root }}/"
  register: rsync_result
  changed_when: "'<<CHANGED>>' in rsync_result.stdout"
  become: true

- name: Install dnsmasq
  ansible.builtin.package:
    name: dnsmasq
    state: present
  become: true

- name: Stop dnsmasq if running
  ansible.builtin.systemd:
    name: dnsmasq
    state: stopped
  become: true
  ignore_errors: true

- name: Check what's using port 53
  ansible.builtin.shell: "lsof -i :53 || netstat -tulnp | grep :53 || true"
  register: port53_check
  become: true

- name: Display what's using port 53
  ansible.builtin.debug:
    msg: "Port 53 usage: {{ port53_check.stdout_lines }}"

- name: Stop any existing dnsmasq processes
  ansible.builtin.shell: "pkill -f dnsmasq || true"
  become: true
  ignore_errors: true

- name: Stop systemd-resolved completely
  ansible.builtin.systemd:
    name: systemd-resolved
    state: stopped
    enabled: false
  become: true
  ignore_errors: true

- name: Kill any remaining systemd-resolved processes
  ansible.builtin.shell: "pkill -f systemd-resolved || true"
  become: true
  ignore_errors: true

- name: Kill any other processes using port 53
  ansible.builtin.shell: |
    for pid in $(lsof -t -i :53 2>/dev/null || true); do
      if [ -n "$pid" ]; then
        echo "Killing process $pid using port 53"
        kill -9 "$pid" || true
      fi
    done
  become: true
  ignore_errors: true

- name: Disable systemd-resolved DNS stub listener
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: '^#?DNSStubListener='
    line: 'DNSStubListener=no'
    backup: true
  become: true

- name: Remove /etc/resolv.conf symlink if it exists
  ansible.builtin.file:
    path: /etc/resolv.conf
    state: absent
  become: true

- name: Create new /etc/resolv.conf
  ansible.builtin.copy:
    content: |
      nameserver {{ router_ip }}
      nameserver 8.8.8.8
    dest: /etc/resolv.conf
    backup: true
  become: true

- name: Wait for ports to be fully released
  ansible.builtin.pause:
    seconds: 5

- name: Final check - what's still using port 53
  ansible.builtin.shell: "lsof -i :53 || netstat -tulnp | grep :53 || echo 'Port 53 is free'"
  register: port53_final
  become: true

- name: Display final port 53 status
  ansible.builtin.debug:
    msg: "Final port 53 status: {{ port53_final.stdout_lines }}"

- name: Detect actual network interface
  ansible.builtin.shell: "ip route | grep default | awk '{print $5}' | head -1"
  register: detected_interface
  become: true

- name: Display detected interface
  ansible.builtin.debug:
    msg: "Detected interface: {{ detected_interface.stdout }}, configured: {{ net_iface }}"

- name: Override interface if detection differs
  ansible.builtin.set_fact:
    net_iface: "{{ detected_interface.stdout }}"
  when: detected_interface.stdout != net_iface and detected_interface.stdout != ""

- name: Remove any existing dnsmasq configuration
  ansible.builtin.file:
    path: /etc/dnsmasq.conf
    state: absent
  become: true

- name: Remove dnsmasq configuration directory contents
  ansible.builtin.shell: "rm -f /etc/dnsmasq.d/*"
  become: true
  ignore_errors: true

- name: Create clean dnsmasq configuration
  ansible.builtin.template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    mode: '0644'
  become: true

- name: Test dnsmasq configuration syntax
  ansible.builtin.command: "dnsmasq --test -C /etc/dnsmasq.conf"
  register: dnsmasq_test
  become: true

- name: Display dnsmasq test results
  ansible.builtin.debug:
    msg: "dnsmasq config test: {{ dnsmasq_test.stdout_lines }}"

- name: Start and enable dnsmasq
  ansible.builtin.systemd:
    name: dnsmasq
    state: started
    enabled: true
    daemon_reload: true
  become: true

